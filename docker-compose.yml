services:
  # Cognify API Service - Production
  cognify-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: cognify/api:production
    container_name: cognify-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cognify:${DB_PASSWORD}@postgres:5432/cognify_production
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - ENABLE_ENTERPRISE_FEATURES=true
      # LLM configuration removed - all settings come from database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: always
    networks:
      - cognify-network
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: cognify-postgres
    environment:
      - POSTGRES_DB=cognify_production
      - POSTGRES_USER=cognify
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_production_data:/var/lib/postgresql/data
      - ./scripts/init-production-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: always
    networks:
      - cognify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cognify -d cognify_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: cognify-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_production_data:/data
    restart: always
    networks:
      - cognify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Qdrant Vector Database - Production
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cognify-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_production_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    restart: always
    networks:
      - cognify-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -n '' > /dev/tcp/localhost/6333"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: cognify-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx-production.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/ssl:/etc/nginx/ssl
    depends_on:
      - cognify-api
    restart: always
    networks:
      - cognify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring - Production
  prometheus:
    image: prom/prometheus:latest
    container_name: cognify-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus-production.yml:/etc/prometheus/prometheus.yml
      - prometheus_production_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: always
    networks:
      - cognify-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard - Production
  grafana:
    image: grafana/grafana:latest
    container_name: cognify-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_production_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: always
    networks:
      - cognify-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

volumes:
  postgres_production_data:
    driver: local
  redis_production_data:
    driver: local
  qdrant_production_data:
    driver: local
  prometheus_production_data:
    driver: local
  grafana_production_data:
    driver: local

networks:
  cognify-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
